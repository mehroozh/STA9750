[
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": "STA/OPR 9750 - Course Policies & Additional Resources",
    "section": "",
    "text": "R for Data Science (R4DS) is an excellent free textbook covering much of the material of this course.\nThe tidyverse packages used throughout this course have excellent documentation:\n\nreadr\ndplyr\ntidyr\nggplot2\nrvest\n\nStudents may also benefit from the Unofficial Solutions for R4DS, the Posit R Cheatsheets, Statistical Infernece via Data Science, and the book Elegrant Graphics for Data Analysis.\nStudents are encouraged to ask the instructor for additional resources as needed.\n\n\nSTA/OPR 9750 will use Piazza as the course discussion board. Students are encouraged to direct all questions about course topics or logistics to Piazza; use of a public anonymous discussion board allows students to benefit from the insights of their classmates and allows instructors to answer questions publicly to the benefit of all students.\nStudents are encouraged to use Piazza’s private question feature if they need to contact the instructor directly. Please only use private questions for personal inquiries: questions about the technical substance of the course can and should be asked (pseudonymously) in the public section of Piazza.\nPiazza login information will be distributed through CUNY Brightspace.\n\n\n\nWritten and oral communication is an important element of this course.\nThe Baruch Writing Center offers free support to all Baruch students; students can meet with a professional writing consultant one-to-one (in person, in NVC 8-185, or online, by video, audio, and text-based chat) and in group workshops. Writing Center consultants will work collaboratively with you to deepen your writing and English language skills. At any step in the process, they’ll help you become a more independent, confident, and versatile writer.1\nBaruch’s Tools for Clear Speech program improves the pronunciation, fluency, and pragmatic abilities of English language learners and non-native English speakers at Baruch College. TfCS participants achieve more effective and intelligible communication, developing skills that empower them to succeed in their classrooms, careers, and beyond. TfCS offers a range of free face-to-face and online services with our professional Speech Consultants, including One-to-One Sessions, small-group Focused Skills Series sessions, large-group Overview Workshops, interview and career preparation, and weekly Conversation Hours.\n\n\n\nAll software used in this course is Free and Open-Source Software that can be installed on your personal machine without cost. Students will need to install, at a minimum,\n\nR\nrstudio Desktop Edition\nquarto\n\nThanks to the Binder project, we are also able to provide free virtual machines equipped with all course software pre-installed:\n\nRStudio\nCommand Line Access\n\nCUNY also provides a Windows-based RStudio virtual machine through Apporto.\nPlease note that these are transient instances and any work saved on these machines may be lost without warning."
  },
  {
    "objectID": "resources.html#course-resources",
    "href": "resources.html#course-resources",
    "title": "STA/OPR 9750 - Course Policies & Additional Resources",
    "section": "",
    "text": "R for Data Science (R4DS) is an excellent free textbook covering much of the material of this course.\nThe tidyverse packages used throughout this course have excellent documentation:\n\nreadr\ndplyr\ntidyr\nggplot2\nrvest\n\nStudents may also benefit from the Unofficial Solutions for R4DS, the Posit R Cheatsheets, Statistical Infernece via Data Science, and the book Elegrant Graphics for Data Analysis.\nStudents are encouraged to ask the instructor for additional resources as needed.\n\n\nSTA/OPR 9750 will use Piazza as the course discussion board. Students are encouraged to direct all questions about course topics or logistics to Piazza; use of a public anonymous discussion board allows students to benefit from the insights of their classmates and allows instructors to answer questions publicly to the benefit of all students.\nStudents are encouraged to use Piazza’s private question feature if they need to contact the instructor directly. Please only use private questions for personal inquiries: questions about the technical substance of the course can and should be asked (pseudonymously) in the public section of Piazza.\nPiazza login information will be distributed through CUNY Brightspace.\n\n\n\nWritten and oral communication is an important element of this course.\nThe Baruch Writing Center offers free support to all Baruch students; students can meet with a professional writing consultant one-to-one (in person, in NVC 8-185, or online, by video, audio, and text-based chat) and in group workshops. Writing Center consultants will work collaboratively with you to deepen your writing and English language skills. At any step in the process, they’ll help you become a more independent, confident, and versatile writer.1\nBaruch’s Tools for Clear Speech program improves the pronunciation, fluency, and pragmatic abilities of English language learners and non-native English speakers at Baruch College. TfCS participants achieve more effective and intelligible communication, developing skills that empower them to succeed in their classrooms, careers, and beyond. TfCS offers a range of free face-to-face and online services with our professional Speech Consultants, including One-to-One Sessions, small-group Focused Skills Series sessions, large-group Overview Workshops, interview and career preparation, and weekly Conversation Hours.\n\n\n\nAll software used in this course is Free and Open-Source Software that can be installed on your personal machine without cost. Students will need to install, at a minimum,\n\nR\nrstudio Desktop Edition\nquarto\n\nThanks to the Binder project, we are also able to provide free virtual machines equipped with all course software pre-installed:\n\nRStudio\nCommand Line Access\n\nCUNY also provides a Windows-based RStudio virtual machine through Apporto.\nPlease note that these are transient instances and any work saved on these machines may be lost without warning."
  },
  {
    "objectID": "resources.html#course-policies",
    "href": "resources.html#course-policies",
    "title": "STA/OPR 9750 - Course Policies & Additional Resources",
    "section": "Course Policies",
    "text": "Course Policies\n\nAcademic Integrity Policy\nI fully support CUNY’s Policy on Academic Integrity, which states, in part:\n\nAcademic dishonesty is prohibited in The City University of New York. Penalties for academic dishonesty include academic sanctions, such as failing or otherwise reduced grades, and/or disciplinary sanctions, including suspension or expulsion.\n\n\nAcademic integrity is at the core of a college or university education. Faculty assign essays, exams, quizzes, projects, and so on both to extend the learning done in the classroom and as a means of assessing that learning. When students violate the academic integrity policy (i.e., “cheat”), they are committing an act of theft that can cause real harm to themselves and others including, but not limited to, their classmates, their faculty, and the caregivers who may be funding their education. Academic dishonesty confers an unfair advantage over others, which undermines educational equity and fairness. Students who cheat place their college’s accreditation and their own future prospects in jeopardy.\n\nAcademic sanctions in this class will range from an F on the Assignment to an F in this Course. A report of suspected academic dishonesty will be sent to the Office of the Dean of Students.\nStudents are encouraged to contact the instructor with any questions or concerns related to matters of academic integrity.\n\n\nExternal Resources Use Policy\nFor the coding elements of this course, students are encouraged to use freely available online resources, including question-and-answer fora such as StackOverflow. You may also use AI-driven developer tools such as GitHub Co-Pilot. Paid services are not allowed. On each assignment, you will be asked to list external resources used on each assignment. You are ultimately responsible for the correctness of any submitted materials - ``the AI told me so’’ is not a valid defense.\nNote on ChatGPT and Related Large-Language Models: You may not use large-language models to complete any assignment in this course. Specifically, you may not use tools where you describe the course assignment in natural language and receive (pseudo-)code output. While these tools are powerful, and often surprisingly accurate, for this task, using them in this manner will undermine the learning objectives of this course.\nFor the written elements of this course (e.g. Project Final Report), standard academic expectations of attribution and citation are in place. This will be covered in more detail in the course project documents.\nStudents are highly encouraged to collaborate on homework assignments, but each student is required to individually and complete each assignment. If substantially identical assignments are submitted, the instructor may require each student to individually demonstrate their understanding of the material. Collaborators should be listed at the end of each submitted assignment along with a statement of contributions.\n\n\nUnexcused Abscence Policy\nAttendance is not required, but lecture recordings will not be provided. Students are responsible for the content of all sessions missed.\n\n\nLate Work Policy\nLate work will not be accepted except in extraordinary and unforeseeable circumstances. Students submitting late work should provide supporting documentation to the Office of the Dean of Students; ODS will provide the instructor with a letter authorizing late work submission as appropriate.\nAll assignment submission technology used in this course allows multiple submissions, so students are encouraged to submit early and often to avoid any technology troubles associated with late submission.\nNote that late work is allowed consistent with specific pre-arranged course accomodations as noted below."
  },
  {
    "objectID": "resources.html#course-accomodations",
    "href": "resources.html#course-accomodations",
    "title": "STA/OPR 9750 - Course Policies & Additional Resources",
    "section": "Course Accomodations",
    "text": "Course Accomodations\n\nDisability Services\nIt is CUNY policy to provide Accommodations and Academic Adjustments to students with disabilities.\nAny student who has a disability who may need accommodations in this class should register as early as possible with Student Disability Services. Your registration with Student Disability Services is confidential, and is not recorded on your Baruch Academic Record. SDS can be reached by email at disability.services@baruch.cuny.edu, by phone at 646-312-4590, or in person at NVC 2-272.\nPlease note that the instructor cannot provide accommodations unless requested by SDS.\n\n\nReligious Accomodations\nIt is CUNY policy to provide accommodations for students’ sincerely held religious beliefs. If a religious accommodation is requested, please contact the instructor at least two weeks in advance."
  },
  {
    "objectID": "resources.html#care-resources-for-students1",
    "href": "resources.html#care-resources-for-students1",
    "title": "STA/OPR 9750 - Course Policies & Additional Resources",
    "section": "Care Resources for Students2",
    "text": "Care Resources for Students2\nTake care of yourself. Do your best to maintain a healthy lifestyle this semester by eating well, exercising, avoiding drugs and alcohol, getting enough sleep and taking some time to relax. This will help you achieve your goals and cope with stress.\nAll of us benefit from support during times of struggle. You are not alone. Asking for support sooner rather than later is often helpful.\nThis course is intended to be demanding, but not difficult. If you feel like you are struggling, please reach out sooner rather than later. Swimming long-distances in choppy waters builds strength: drowning doesn’t.\n\nMental Health Resources\nIf you or anyone you know experiences significant academic stress, difficult life events, or feelings like anxiety or depression, I strongly encourage you to seek support.\nThe Baruch Counselling Center is here to help. You can visit them in person at 137 E 25th St, 9th floor or call them at 646-312-2155 during normal business hours; you can make an appointment online here. For more immediate support, please call NYC WELL (1-888-NYC-WELL or 1-888-692-9355).\nAsking for help is often difficult: consider reaching out to a friend, family, or a member of the faculty you trust for help getting connected to support that can help.\nIf you are worried about a friend or classmate, consider reaching out to the Baruch Campus Intervention Team.\n\n\nPhysical Health\nHealthy CUNY promotes well-being and a culture of health in order to foster the academic and life success of all CUNY students. They can connect you with a variety of campus- and community-based healthcare providers.\nBaruch Health Services provides students with a full range of clinical health services. Call 646-312-2040 or email StudentHealthCareCenter@baruch.cuny.edu to make an appointment.\n\n\nFood Security\nAll CUNY students have access to CUNY Food Pantries located throughout the five boroughs, thanks to the CUNY CARES program. CUNY CARES is also able to help qualifying students with SNAP (“Food Stamps”) enrollment.\n\n\nImmigration Status\nCUNY Citizenship Now! provides confidential, high-quality immigration law services to all CUNY students.\nNote that Citizenship Now!’s primary Manhattan office is located in the Heights, not on the Baruch campus and that an appointment is strongly recommended. Call 646-664-9350 during standard business hours for more information or to make an appointment"
  },
  {
    "objectID": "resources.html#footnotes",
    "href": "resources.html#footnotes",
    "title": "STA/OPR 9750 - Course Policies & Additional Resources",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDescriptions of Baruch and CUNY resources adapted from program websites.↩︎\nLanguage adapted from Professor Ryan Tibshirani (UC Berkeley).↩︎"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "STA/OPR 9750 - Course Syllabus",
    "section": "",
    "text": "Professor Michael Weylandt\nDepartment of Information Systems & Statistics\nZicklin School of Business\nBaruch College, CUNY"
  },
  {
    "objectID": "syllabus.html#footnotes",
    "href": "syllabus.html#footnotes",
    "title": "STA/OPR 9750 - Course Syllabus",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nTheoretically, this may result in scores equivalent to an A in an un-curved course receiving a lower grade in this course. In practice, the instructor will design course assessments to induce a range of scores and does not anticipate “down-curving” happening.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STA/OPR 9750 - Basic Software Tools for Data Analysis",
    "section": "",
    "text": "Welcome to the course website for STA/OPR 9750 (Fall 2024)!\nSTA/OPR 9750 is an Introduction to R targeted at students in the MS in Business Analytics, MS in Statistics, and MS in Quantitative Methods programs. Though listed as a double course, STA9750 and OPR9750 will be taught and graded jointly: students are encouraged to collaborate with classmates in either section.\nThis site hosts the unofficial Course Syllabus, Course Policies, and Course Learning Objectives. Official copies of these documents can be found on CUNY Blackboard. Course pre-assignments, labs, and mini-projects can also be found on this site.\nThis year, STA9750 will be taught in a mixture of the flipped-classroom and experiential-learning formats. Roughly, this means that most weeks, students will be asked to complete a small pre-assignment each week to introduce the core concept(s) covered in that week’s lecture. Each class period will be split between a brief lecture covering concepts in more detail and an extended lab activity designed to build familiarity and fluency with that week’s subject matter.\nThere are quite a few moving parts to this course, so this key dates file or the list of upcoming course activities below may be useful:\n\n\n\n\n\n\n\nInstructor: Michael Weylandt"
  },
  {
    "objectID": "labs.html",
    "href": "labs.html",
    "title": "STA/OPR 9750 - In-Class Labs",
    "section": "",
    "text": "Most weeks, the Thursday ‘lecture’ for STA/OPR 9750 will be dedicated to an in-class “lab”. These ungraded labs are an opportunity to see how the concepts introduced in that week’s pre-assignment are used in practice.\nLabs:\n\nLab #01: Rev your Engines! Setting-Up R and RStudio\nLab #02: Getting Down with Markdown\nLab #03: R, These are your first steps…\nLab #04: TBA\nLab #05: TBA\nLab #07: TBA\nLab #08: TBA\nLab #09: TBA\nLab #11: TBA\nLab #12: TBA\nLab #13: TBA"
  },
  {
    "objectID": "miniprojects.html",
    "href": "miniprojects.html",
    "title": "STA/OPR 9750 - Mini Projects",
    "section": "",
    "text": "In lieu of traditional homework, STA/OPR 9750 has a series of mini-projects designed to achieve several interlocking goals:\n\nImprove your skills at data analysis\nImprove your improve your ability to give feedback on data analysis work\nSeed a ‘portfolio’ of data science work you can demonstrate to potential employers\n\nEach Mini-Project will be submitted via GitHub, an industry-standard code management platform, as both raw analysis code and as a HTML document hosted on GitHub pages.\nAfter each Mini-Project is submitted, 2-3 peer reviewers will be assigned to give feedback and to assign an initial grade following an instructor provided rubric. This feedback will be given via GitHub Issues.\nIn order to ensure good peer feedback, the peer feedback will be evaluated by the instructor in a “meta-review” worth a small fraction of the overall grade.\nIf you believe your mini-project has received inaccurate peer feedback, please contact the instructor directly within 48 hours of the peer feedback deadline. No student-initiated requests for re-grading will be accepted after that time, though the instructor may re-grade the work during the meta-review stage.\n\nMini-Projects\n\nMini-Project #00: Course Set-Up\nDue Date:\n\nReleased to Students: 2024-08-29\nInitial Submission: 2024-09-11 at 11:45pm\nPeer Feedback: 2024-09-18 at 11:45pm\n\nIn the ungraded Mini-Project #00, there is no data analysis required, but you will set up the basic web tooling used to submit projects #01 to #04.\nNote that, even though ungraded, Mini-Project #00 must be completed to remain enrolled in this course and before any other Mini-Projects can be submitted.\n\n\nMini-Project #01: TBA\nDue Dates:\n\nReleased to Students: 2024-09-12\nInitial Submission: 2024-09-25 at 11:45pm\nPeer Feedback: 2024-10-02 at 11:45pm\n\n\n\nMini-Project #02: TBA\nDue Dates:\n\nReleased to Students: 2024-09-26\nInitial Submission: 2024-10-23 at 11:45pm\nPeer Feedback: 2024-10-30 at 11:45pm\n\n\n\nMini-Project #03: TBA\nDue Dates:\n\nReleased to Students: 2024-10-24\nInitial Submission: 2024-11-13 at 11:45pm\nPeer Feedback: 2024-11-20 at 11:45pm\n\n\n\nMini-Project #04: TBA\nDue Dates:\n\nReleased to Students: 2024-11-14\nInitial Submission: 2024-12-04 at 11:45pm\nPeer Feedback: 2024-12-11 at 11:45pm"
  },
  {
    "objectID": "labs/lab01.html",
    "href": "labs/lab01.html",
    "title": "STA 9750 Week 1 In-Class Activity: R and RStudio\n",
    "section": "",
    "text": "Topics:\n\nInstalling R and RStudio\n\nInstalling git\n\nGetting Started on GitHub\n\nBasic Principles of “Clean Code”\n\n\nThe primary programming language used in this course is R, one of the two most popular languages used in data science. R, like its predecessor the S language, is optimized for interactive, data-analytic work, in contrast with python, which is optimized for general purpose computing.\nR is a programming language and runtime; we will supplement it with RStudio, an Integrated Development Environment or, less formally, an editor. RStudio is the software where you will write the code and then the R runtime will execute it.\n\nStudents should first install R from https://cloud.r-project.org/.\n\n\nDon’t fear the 90’s web design! Click image for detailed installation instructions.\n\nAs of 2024-08-26, the most recent version of R is 4.4.1. Using the most current version of R will reduce the likelihood of issues later in the course.\n\nNext, download and install the RStudio IDE (desktop edition).\n\n\nClick image for detailed installation instructions.\n\nRStudio is highly configurable and I recommend taking advantage of all its built-in features. If you go to the Global Options menu (accessible under Tools), I recommend the following settings:\n\nGeneral: Uncheck “Restore .RData into workspace at startup”.\nGeneral: Set “Save workspace to .RData on exit” to “Never”\nCode / Editing: Set “Tab width” to 2\nCode / Editing: Check\n\n“Insert spaces for Tab”\nAuto-detect code indentation\nInsert matching parens / quotes\nUse native pipe operator\nAuto-indent code after paste\nVertically align arguments in auto-indent\nContinue comment when inserting new line\n\n\nCode / Display: Check\n\nShow line numbers\nShow margin (margin column should be 80)\n\n\nCode / Diagnostics: check all “R” diagnostics.\nAppearance: Pick a color theme you enjoy. (I’m partial to light text on a dark background)\n\nYou may wish to enable GitHub Copilot. I have little experience with GH Copilot, but it seems quite popular and is allowed in this course. It is not guaranteed to be accurate at all times - and “the AI told me to” is not a valid excuse if your code is wrong - but on balance, it should be useful.\n\nWe won’t use it this week, but you will need to install Quarto before starting on Mini-Project #00.\n\n\ngit is a source-code management tool, used by developers to manage the code they write. If you’ve ever been part of a large project and struggled to coordinate all team members using the same version of a document, git exists to solve that problem.\nIn this course, we will use three main functions of git:\n\n\nstaging: telling git, I want you to prepare to save a certain file\n\ncommitting: saving a set of related changes\n\npushing: copying your committed changes to a separate server for sharing and backup\n\nWhenever you write code you are happy with, you should use git to save it. Saving changes with git is cheap and easy - so do it regularly. You always want git to have a backup of good code in case you loose power, accidentally delete a file, break something in a way you’re not sure how to undo, etc..\nRStudio comes with powerful git integration. Once you have created a project, you should see a tab labelled “Git” in the top right corner of your IDE window that looks something like this:\n\nTo stage a file - prepare to save it - click the empty check box next to the file name. A new file shows a status of “?” - this is git saying “I’ve never seen this file before. Do you want me to track it for you?”. Later, when you make further changes to file you have already asked git to track, a status of “M” (for Modified) will be shown.\nOn its own staging a file does nothing. You also need to commit it for git to truly track it.1 The Commit button will commit all staged changes. When you make a commit, git requires a brief message summarizing the changes. There’s no particular formatting requirement to this message, but it should be something that future-you is able to easily understand. For instance, the commit message from the initial draft of this document reads as:\nInitial draft of Lab 01 (STA9750)\n\n- Installing R and RStudio\n- Git and GitHub\n- Leaflet Example for Styler\n\nTODO: Fuller shell explainers\nTODO: Link more git help\nWhen I read this, I know the purpose of the change I made (first line), the contents of that change (list), and parts that still need more work.\nFinally, after you save a change, it is only saved on your computer. The true power of git comes from its ability to copy changes and backups across machines. This gives you an easy way to store backups in case your computer dies and makes collaboration efficient and fun. git allows you to push and pull changes between machines in endlessly powerful (but sometimes complex) ways. For this course, we’ll keep things simple and only use GitHub to share code. We discuss GitHub in the next section.\nReference: We will not use all of the functionality of git in this course, but you should familiarize yourself with Chapters 1, 2, and 6 of the Git Book over the next two weeks.\n\nGitHub is an industry-standard code hosting and collaboration platform. In addition to hosting copies of code, GitHub provides web hosting, bug reporting, code review, continuous integration, documentation wikis, and discussion fora. You will explore GitHub in more detail starting in Mini-Project #00.\n\n\nA major theme of this course will be sharing and co-developing code with your classmates, both for peer feedback and for the course project. Code sharing is hard! Everyone writes code a little differently and what is clear to you may not be clear at all to your reader.\nTo make code sharing just a bit easier, we use tools to ensure all code shared in this course is consistently formatted. By using consistent formatting, you reduce the cognitive load on your reader, making it easier for them to focus on the ideas of your code, not how you chose to write it.\nA major strength of R is its huge number of user-contributed packages. These are “add-ins” which provide additional functionality not available in the basic version of R. As of 2024-08-26, there are over 21 thousand packages available on CRAN, the largest official repository of R packages. Beyond all those, there are thousands more packages available on other code hosting websites like GitHub.2\nWe will use the contributed styler package to format code in this course. Run the following command to automatically download and install the styler package:\n\ninstall.packages(\"styler\")\n\n(Use the clipboard icon on the right of code snippets to automatically copy code suitable for pasting into RStudio.)\nYou should see something like this:\n\nThe styler package has been downloaded and installed on your computer, but it is not yet “active” or “open” in R. In general, you will only need to download packages once, but you will need to load them each time you want to use them.3\nOpen a R file in RStudio and copy the following (ugly) code:\n\nif(!require(\"leaflet\")) install.packages(\"leaflet\")\nif(!require(\"tidyverse\")){\n    install.packages(\"tidyverse\")\n   }\n library(tidyverse)\n     library(rvest)\nlibrary(leaflet)\n\npAGE = read_html('https://en.wikipedia.org/wiki/Baruch_College')\n  pAGE |&gt; html_element(\".latitude\") |&gt; html_text2() -&gt; BaruchLatitude\n  baruch_longitude &lt;- pAGE |&gt; html_element(\".longitude\") |&gt; html_text2()\n  \n    BaruchLatitude &lt;- sum(as.numeric(strsplit(BaruchLatitude, \n                                     \"[^0123456789]\")[[1]]) * (1/60)^(0:2), na.rm=TRUE)\n baruch_longitude &lt;- sum(as.numeric(strsplit(baruch_longitude, \"[^0123456789]\")[[1]]) * \n                             (1/60)^(0:2), na.rm=TRUE)\n  \nleaflet() %&gt;% addTiles() %&gt;% setView(-baruch_longitude, BaruchLatitude, zoom=17) %&gt;%\n    addPopups(-baruch_longitude, BaruchLatitude, \"Look! It's &lt;b&gt;Baruch College&lt;/b&gt;!\")\n\nYou don’t need to understand what this does just yet, but it’s hopefully clear that this is ugly code. Nothing is lined up properly, capitalization is erratic, and different coding styles are intermixed rather recklessly.\nNear the top of your RStudio pane, you will see a drop-down menu titled Addins. If you successfully installed styler above, one of the Addins choices will be “style active file.” Click this and the code will be cleaned up (a bit) resulting in something like this:\n\nif (!require(\"leaflet\")) install.packages(\"leaflet\")\nif (!require(\"tidyverse\")) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(leaflet)\n\npAGE &lt;- read_html(\"https://en.wikipedia.org/wiki/Baruch_College\")\npAGE |&gt;\n  html_element(\".latitude\") |&gt;\n  html_text2() -&gt; BaruchLatitude\nbaruch_longitude &lt;- pAGE |&gt;\n  html_element(\".longitude\") |&gt;\n  html_text2()\n\nBaruchLatitude &lt;- sum(as.numeric(strsplit(\n  BaruchLatitude,\n  \"[^0123456789]\"\n)[[1]]) * (1 / 60)^(0:2), na.rm = TRUE)\nbaruch_longitude &lt;- sum(as.numeric(strsplit(baruch_longitude, \"[^0123456789]\")[[1]]) *\n  (1 / 60)^(0:2), na.rm = TRUE)\n\nleaflet() %&gt;%\n  addTiles() %&gt;%\n  setView(-baruch_longitude, BaruchLatitude, zoom = 17) %&gt;%\n  addPopups(-baruch_longitude, BaruchLatitude, \"Look! It's &lt;b&gt;Baruch College&lt;/b&gt;!\")\n\nIt’s far from perfect - and we will discuss the many issues in this example throughout the course - but it’s better! At a minimum, you should make sure to run styler like this on all code you submit during this course.\nAnd now that your code is cleaned up, you should run it! The Source button in the top right corner will run all code in the open file. Running the code produces something like this:\n\n\n\n\n\n\nNot too shabby! That’s an interactive, dynamic map showing the location of Baruch College obtained by parsing the Baruch Wikipedia page, getting the GPS coordinates of Baruch, downloading a map file, and locating Baruch on that map.\nChallenge: Adjust this code to show Hunter college instead of Baruch.\n\nIf you want even more feedback on writing good code, install the lintr package and use the associated RStudio add-in. Unlike styler, lintr won’t make changes automatically for you, but it will highlight much more subtle possible problems.4\n\nTo become a true “power user” of tools like R and python, you will need to become more familiar with the command line interface (CLI) and associated tools.5\nThe Software Carpentry Unix Shell Tutorial is a great introduction to shell usage. Check it out!\nNB: MacOS and Linux systems work quite similarly under the hood, as both descend from the Unix tradition. By contrast, Windows works somewhat differently. Learners whose personal machine runs Windows are encouraged to take advantage of the provided Linux-running virtual machines6 as they work through this section.\n\n\nNext week, we will use these tools to begin coding in earnest. If you’re feeling ambitious, go ahead and get started on Mini-Project #00."
  },
  {
    "objectID": "labs/lab01.html#r-and-rstudio",
    "href": "labs/lab01.html#r-and-rstudio",
    "title": "STA 9750 Week 1 In-Class Activity: R and RStudio\n",
    "section": "",
    "text": "The primary programming language used in this course is R, one of the two most popular languages used in data science. R, like its predecessor the S language, is optimized for interactive, data-analytic work, in contrast with python, which is optimized for general purpose computing.\nR is a programming language and runtime; we will supplement it with RStudio, an Integrated Development Environment or, less formally, an editor. RStudio is the software where you will write the code and then the R runtime will execute it.\n\nStudents should first install R from https://cloud.r-project.org/.\n\n\nDon’t fear the 90’s web design! Click image for detailed installation instructions.\n\nAs of 2024-08-26, the most recent version of R is 4.4.1. Using the most current version of R will reduce the likelihood of issues later in the course.\n\nNext, download and install the RStudio IDE (desktop edition).\n\n\nClick image for detailed installation instructions.\n\nRStudio is highly configurable and I recommend taking advantage of all its built-in features. If you go to the Global Options menu (accessible under Tools), I recommend the following settings:\n\nGeneral: Uncheck “Restore .RData into workspace at startup”.\nGeneral: Set “Save workspace to .RData on exit” to “Never”\nCode / Editing: Set “Tab width” to 2\nCode / Editing: Check\n\n“Insert spaces for Tab”\nAuto-detect code indentation\nInsert matching parens / quotes\nUse native pipe operator\nAuto-indent code after paste\nVertically align arguments in auto-indent\nContinue comment when inserting new line\n\n\nCode / Display: Check\n\nShow line numbers\nShow margin (margin column should be 80)\n\n\nCode / Diagnostics: check all “R” diagnostics.\nAppearance: Pick a color theme you enjoy. (I’m partial to light text on a dark background)\n\nYou may wish to enable GitHub Copilot. I have little experience with GH Copilot, but it seems quite popular and is allowed in this course. It is not guaranteed to be accurate at all times - and “the AI told me to” is not a valid excuse if your code is wrong - but on balance, it should be useful.\n\nWe won’t use it this week, but you will need to install Quarto before starting on Mini-Project #00."
  },
  {
    "objectID": "labs/lab01.html#source-code-management",
    "href": "labs/lab01.html#source-code-management",
    "title": "STA 9750 Week 1 In-Class Activity: R and RStudio\n",
    "section": "",
    "text": "git is a source-code management tool, used by developers to manage the code they write. If you’ve ever been part of a large project and struggled to coordinate all team members using the same version of a document, git exists to solve that problem.\nIn this course, we will use three main functions of git:\n\n\nstaging: telling git, I want you to prepare to save a certain file\n\ncommitting: saving a set of related changes\n\npushing: copying your committed changes to a separate server for sharing and backup\n\nWhenever you write code you are happy with, you should use git to save it. Saving changes with git is cheap and easy - so do it regularly. You always want git to have a backup of good code in case you loose power, accidentally delete a file, break something in a way you’re not sure how to undo, etc..\nRStudio comes with powerful git integration. Once you have created a project, you should see a tab labelled “Git” in the top right corner of your IDE window that looks something like this:\n\nTo stage a file - prepare to save it - click the empty check box next to the file name. A new file shows a status of “?” - this is git saying “I’ve never seen this file before. Do you want me to track it for you?”. Later, when you make further changes to file you have already asked git to track, a status of “M” (for Modified) will be shown.\nOn its own staging a file does nothing. You also need to commit it for git to truly track it.1 The Commit button will commit all staged changes. When you make a commit, git requires a brief message summarizing the changes. There’s no particular formatting requirement to this message, but it should be something that future-you is able to easily understand. For instance, the commit message from the initial draft of this document reads as:\nInitial draft of Lab 01 (STA9750)\n\n- Installing R and RStudio\n- Git and GitHub\n- Leaflet Example for Styler\n\nTODO: Fuller shell explainers\nTODO: Link more git help\nWhen I read this, I know the purpose of the change I made (first line), the contents of that change (list), and parts that still need more work.\nFinally, after you save a change, it is only saved on your computer. The true power of git comes from its ability to copy changes and backups across machines. This gives you an easy way to store backups in case your computer dies and makes collaboration efficient and fun. git allows you to push and pull changes between machines in endlessly powerful (but sometimes complex) ways. For this course, we’ll keep things simple and only use GitHub to share code. We discuss GitHub in the next section.\nReference: We will not use all of the functionality of git in this course, but you should familiarize yourself with Chapters 1, 2, and 6 of the Git Book over the next two weeks.\n\nGitHub is an industry-standard code hosting and collaboration platform. In addition to hosting copies of code, GitHub provides web hosting, bug reporting, code review, continuous integration, documentation wikis, and discussion fora. You will explore GitHub in more detail starting in Mini-Project #00."
  },
  {
    "objectID": "labs/lab01.html#code-styling",
    "href": "labs/lab01.html#code-styling",
    "title": "STA 9750 Week 1 In-Class Activity: R and RStudio\n",
    "section": "",
    "text": "A major theme of this course will be sharing and co-developing code with your classmates, both for peer feedback and for the course project. Code sharing is hard! Everyone writes code a little differently and what is clear to you may not be clear at all to your reader.\nTo make code sharing just a bit easier, we use tools to ensure all code shared in this course is consistently formatted. By using consistent formatting, you reduce the cognitive load on your reader, making it easier for them to focus on the ideas of your code, not how you chose to write it.\nA major strength of R is its huge number of user-contributed packages. These are “add-ins” which provide additional functionality not available in the basic version of R. As of 2024-08-26, there are over 21 thousand packages available on CRAN, the largest official repository of R packages. Beyond all those, there are thousands more packages available on other code hosting websites like GitHub.2\nWe will use the contributed styler package to format code in this course. Run the following command to automatically download and install the styler package:\n\ninstall.packages(\"styler\")\n\n(Use the clipboard icon on the right of code snippets to automatically copy code suitable for pasting into RStudio.)\nYou should see something like this:\n\nThe styler package has been downloaded and installed on your computer, but it is not yet “active” or “open” in R. In general, you will only need to download packages once, but you will need to load them each time you want to use them.3\nOpen a R file in RStudio and copy the following (ugly) code:\n\nif(!require(\"leaflet\")) install.packages(\"leaflet\")\nif(!require(\"tidyverse\")){\n    install.packages(\"tidyverse\")\n   }\n library(tidyverse)\n     library(rvest)\nlibrary(leaflet)\n\npAGE = read_html('https://en.wikipedia.org/wiki/Baruch_College')\n  pAGE |&gt; html_element(\".latitude\") |&gt; html_text2() -&gt; BaruchLatitude\n  baruch_longitude &lt;- pAGE |&gt; html_element(\".longitude\") |&gt; html_text2()\n  \n    BaruchLatitude &lt;- sum(as.numeric(strsplit(BaruchLatitude, \n                                     \"[^0123456789]\")[[1]]) * (1/60)^(0:2), na.rm=TRUE)\n baruch_longitude &lt;- sum(as.numeric(strsplit(baruch_longitude, \"[^0123456789]\")[[1]]) * \n                             (1/60)^(0:2), na.rm=TRUE)\n  \nleaflet() %&gt;% addTiles() %&gt;% setView(-baruch_longitude, BaruchLatitude, zoom=17) %&gt;%\n    addPopups(-baruch_longitude, BaruchLatitude, \"Look! It's &lt;b&gt;Baruch College&lt;/b&gt;!\")\n\nYou don’t need to understand what this does just yet, but it’s hopefully clear that this is ugly code. Nothing is lined up properly, capitalization is erratic, and different coding styles are intermixed rather recklessly.\nNear the top of your RStudio pane, you will see a drop-down menu titled Addins. If you successfully installed styler above, one of the Addins choices will be “style active file.” Click this and the code will be cleaned up (a bit) resulting in something like this:\n\nif (!require(\"leaflet\")) install.packages(\"leaflet\")\nif (!require(\"tidyverse\")) {\n  install.packages(\"tidyverse\")\n}\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(leaflet)\n\npAGE &lt;- read_html(\"https://en.wikipedia.org/wiki/Baruch_College\")\npAGE |&gt;\n  html_element(\".latitude\") |&gt;\n  html_text2() -&gt; BaruchLatitude\nbaruch_longitude &lt;- pAGE |&gt;\n  html_element(\".longitude\") |&gt;\n  html_text2()\n\nBaruchLatitude &lt;- sum(as.numeric(strsplit(\n  BaruchLatitude,\n  \"[^0123456789]\"\n)[[1]]) * (1 / 60)^(0:2), na.rm = TRUE)\nbaruch_longitude &lt;- sum(as.numeric(strsplit(baruch_longitude, \"[^0123456789]\")[[1]]) *\n  (1 / 60)^(0:2), na.rm = TRUE)\n\nleaflet() %&gt;%\n  addTiles() %&gt;%\n  setView(-baruch_longitude, BaruchLatitude, zoom = 17) %&gt;%\n  addPopups(-baruch_longitude, BaruchLatitude, \"Look! It's &lt;b&gt;Baruch College&lt;/b&gt;!\")\n\nIt’s far from perfect - and we will discuss the many issues in this example throughout the course - but it’s better! At a minimum, you should make sure to run styler like this on all code you submit during this course.\nAnd now that your code is cleaned up, you should run it! The Source button in the top right corner will run all code in the open file. Running the code produces something like this:\n\n\n\n\n\n\nNot too shabby! That’s an interactive, dynamic map showing the location of Baruch College obtained by parsing the Baruch Wikipedia page, getting the GPS coordinates of Baruch, downloading a map file, and locating Baruch on that map.\nChallenge: Adjust this code to show Hunter college instead of Baruch.\n\nIf you want even more feedback on writing good code, install the lintr package and use the associated RStudio add-in. Unlike styler, lintr won’t make changes automatically for you, but it will highlight much more subtle possible problems.4"
  },
  {
    "objectID": "labs/lab01.html#extra-welcome-to-shell",
    "href": "labs/lab01.html#extra-welcome-to-shell",
    "title": "STA 9750 Week 1 In-Class Activity: R and RStudio\n",
    "section": "",
    "text": "To become a true “power user” of tools like R and python, you will need to become more familiar with the command line interface (CLI) and associated tools.5\nThe Software Carpentry Unix Shell Tutorial is a great introduction to shell usage. Check it out!\nNB: MacOS and Linux systems work quite similarly under the hood, as both descend from the Unix tradition. By contrast, Windows works somewhat differently. Learners whose personal machine runs Windows are encouraged to take advantage of the provided Linux-running virtual machines6 as they work through this section."
  },
  {
    "objectID": "labs/lab01.html#looking-ahead",
    "href": "labs/lab01.html#looking-ahead",
    "title": "STA 9750 Week 1 In-Class Activity: R and RStudio\n",
    "section": "",
    "text": "Next week, we will use these tools to begin coding in earnest. If you’re feeling ambitious, go ahead and get started on Mini-Project #00."
  },
  {
    "objectID": "labs/lab01.html#footnotes",
    "href": "labs/lab01.html#footnotes",
    "title": "STA 9750 Week 1 In-Class Activity: R and RStudio\n",
    "section": "Footnotes",
    "text": "Footnotes\n\nThis two stage process is a bit cumbersome for the first stage of a small project, but it quickly becomes incredibly valuable. Instead of saving everything every time, there is great power in only saving “good” or “finished” changes to a large project, while leaving work-in-progress elsewhere unsaved. You probably won’t need this level of control until you get to the course project, but it’s better to have it than not.↩︎\nIf you are interested in bioinformatics, the Bioconductor project develops incredible open-source R packages.↩︎\nWhile this may feel cumbersome, it’s really not dissimilar to any other software you use (or R itself). You need to download it once, but you need to open it each time you intend to use it. There’s no harm in re-downloading–free software!–but it wastes time and bandwidth. Since we benefit so much from the free-software community, the very least we can do is not run up their internet bills unnecessarily.↩︎\nSome of the issues identified by lintr may be false positives, but the false positive rate is quite low, especially for the sort of procedural code that is the focus of this course. You should default to trying to appease lintr, but feel free to use the course discussion board for any questions.↩︎\nAs an added benefit, use of the CLI also makes you look like a 90s movie hacker to all your friends.↩︎\nSee the Course Resources page.↩︎"
  },
  {
    "objectID": "miniprojects/mini00.html",
    "href": "miniprojects/mini00.html",
    "title": "Mini-Project #00: Course Set-Up",
    "section": "",
    "text": "In lieu of traditional homework, this course has a set of four mini-projects, which will be assessed in two stages. In the first, you will complete a small data analysis project1; after submission of your analysis, it will be assigned to a classmate, who will evaluate it according to an instructor-provided rubric. This peer feedback stage is an opportunity to see how your classmates answered questions and to compare it to your own response. In doing so, you will learn to evaluate data science work product and will develop a critical eye that can be turned to your own work.\nThis mini-project, however, is a meta-mini-project, designed to help you set up the course infrastructure you will use for the four graded mini-projects.\nNB: Mini-Project #00 is not graded, but it is required. For STA/OPR 9750, it serves as the legally mandated Verification of Enrollment activity. If it is not completed on time, you may be involuntarily disenrolled from the course.\nEstimated Time: 2 hours.\nThis course will use the industry-standard code sharing platform GitHub. Mini-projects and course-projects will be submitted by posting to a relevant GitHub project and creating a world-readable HTML page. A secondary goal of this course is to help students build a web-presence and a data science portfolio, giving you a place to showcase your skills to potential employers. The four mini-projects and the final course project should form an excellent basis for a portfolio. The main aim of Mini-Project #00 is to set up the “skeleton” of this portfolio.\nYou may choose to complete these tasks under a pseudonym if you do not want current or potential employers, classmates, or the world at large to see your work. You will be required to disclose your pseudonym to the instructor. If you choose to use a pseudonym, it will be straightforward to add your name to any or all coursework after the semester ends. Within the course, you will have the option to switch to a pseudonym as desired, but it is difficult to fully anonymize anything once it has been posted on the public internet. With all those cautions, please take a moment to reflect as to whether you wish to proceed under your own name or using a pseudonym."
  },
  {
    "objectID": "miniprojects/mini00.html#stage-1-github-account-creation",
    "href": "miniprojects/mini00.html#stage-1-github-account-creation",
    "title": "Mini-Project #00: Course Set-Up",
    "section": "Stage 1: GitHub Account Creation",
    "text": "Stage 1: GitHub Account Creation\nTo complete this course, you will need a free GitHub personal account, which you can create here. Please note that whatever account name you use will be public, so you need to define a pseudonym here if you choose to use one."
  },
  {
    "objectID": "miniprojects/mini00.html#stage-2-course-repo-creation",
    "href": "miniprojects/mini00.html#stage-2-course-repo-creation",
    "title": "Mini-Project #00: Course Set-Up",
    "section": "Stage 2: Course Repo Creation",
    "text": "Stage 2: Course Repo Creation\n\nCreating GitHub Repo\nNow that you have created a GitHub account, log in and proceed to your dashboard at https://github.com. In the top right corner, click the + symbol and select “New Repository.”2\n\nCreate a new repository named STA9750-2024-FALL with a suitable description.\n\nThis repo needs to be public. You do not need to select a README, .gitignore, or a license at this time.\nAfter you create your repo, you should see a page like this:\n\nNote the URL highlighted in the main box:\n**https://github.com/&lt;USERNAME&gt;/STA9750-2024-FALL.git**\nYou will need this in the next step.\n\n\nConnecting GitHub Repo to RStudio\nNow that you have set up an empty repo, you need to connect it to your personal machine and to RStudio. RStudio’s concept of projects roughly map to GitHub repos and that is what we will use here.\nOpen RStudio and click the project menu in the top right corner:\n\nFollow through the menu to click:\n\nNew Project\nVersion Control\nGit\n\nThis will take you to the following screen:\n\nCopy the .git URL from the previous step into Repository URL.3\n\n\nInitial Push\nNow, to make sure everything is working, let’s save a basic README file and push it to GitHub. This is a plain text file with no particular structure.\nTo create it, click the new file button in RStudio (top left; piece of paper with a green plus) and select Text File. RStudio will open this file in the editor: type some basic content, e.g.,\nSubmission materials for STA9750 at Baruch College. \n\nOwner: &lt;YOURNAME&gt;\n(It doesn’t matter what you push: whatever you type will be the default text appearing when someone visits your repo.)\nSave the file and open the Git pane in RStudio.\n\nCheck the box next to the README file to stage it for git.\n\nThen click the Commit button a type a brief message (Initial commit is fine).\n\nFinally, push the Push button. If everything works, you should see a screen like the below:\n\nTo confirm everything worked, return to the GitHub repo in your browser. You should see the text of your README file displayed at the bottom of the page."
  },
  {
    "objectID": "miniprojects/mini00.html#stage-3-personal-website-creation",
    "href": "miniprojects/mini00.html#stage-3-personal-website-creation",
    "title": "Mini-Project #00: Course Set-Up",
    "section": "Stage 3: Personal Website Creation",
    "text": "Stage 3: Personal Website Creation\nNow that you created a place where you can push files to GitHub and have successfully pushed a basic README, it’s time to build a webpage using quarto.\nWe will need three pages to build a website:\n\nA configuration file, _quarto.yml, used to specify the look and layout of your website.\nAn index.qmd file used to create the homepage.\nA build script to create the website.\n\n\nConfiguration File\nOpen a new text file and save it as _quarto.yml. This is a configuration file used by quarto to control the layout of your site. For a barebones site, copy the following into _quarto.yml:\nproject:\n  type: website\n  output-dir: docs\n\nwebsite:\n  title: \"STA 9750 2024 Submission Material\"\n  description:\n    Course Projects for STA 9750 at Baruch College\n  site-url: \"https://&lt;GITHUB_NAME&gt;.github.io/STA9750-2024-FALL/\"\n  navbar:\n    background: primary\n    search: false\n    \nformat:\n  html:\n    theme: &lt;THEME&gt;\n    toc: false\nNote that the indentation pattern is important so copy this exactly.\nReplace &lt;GITHUB_NAME&gt; with your GitHub user name.\nFor &lt;THEME&gt;, visit the Bootswatch theme gallery and pick your preferred theme. Replace &lt;THEME&gt; with a lower case version of the theme name; if you want to use the Sandstone theme used for this course website, &lt;THEME&gt; will be sandstone.\nOnce you have created this _quarto.yml, stage it (click the check mark) in RStudio’s git pane.\n\n\nindex.qmd\nNext, we’ll build your home page, conventionally called index.html. We will not write the HTML code by hand - it’s quite cumbersome - and will instead let quarto create it for us. Create another plain text file and save it as index.qmd.\nThis file will be divided into two parts, a header giving the metadata for the site, and a body, giving the content of the site.\nFirst write the header, separated by three horizontal bars (minus signs) above and below. For now, all you need to specify is a title:\n---\ntitle: \"YOUR TITLE GOES HERE\"\n---\nBelow the header, write the basic content of your website: a brief introduction of who you are.4 You can use markdown here for formatting. Basic text will suffice, but this is also a great opportunity to include things like a personal headshot, a link to a full resume, or similar.\nAs you work on this, click the “Render” button at the top of the editor pane to see what your site will look like.\nOnce you are happy with this landing page, stage it and we’ll move on to building the website properly.\n\n\nbuild_site.R\nFinally, open a new file - but now it’s an R script, not a text file, in RStudio. Copy the following into build_site.R:\n#!/usr/bin/env Rscript\nif(!require(\"quarto\")){\n    install.packages(\"quarto\")\n}\nlibrary(quarto)\nif(!quarto::quarto_binary_sitrep()){\n    stop(\"Something is wrong with your quarto installation.\")\n}\nquarto::quarto_render(\".\")\nsystem(\"git add docs/*\")\nif(!any(grepl(\"rstudio\", search()))){q(\"no\")}\nClick the Source button in the top-right corner of the editor pane to run this code. If everything works, it will build your website and automatically stage it. Stage build_site.R as well.\nFinally, Commit all these staged files and Push them to GitHub. You have now created a website and just need to turn on a web server so you can access it."
  },
  {
    "objectID": "miniprojects/mini00.html#stage-4-github-pages-deployment",
    "href": "miniprojects/mini00.html#stage-4-github-pages-deployment",
    "title": "Mini-Project #00: Course Set-Up",
    "section": "Stage 4: GitHub Pages Deployment",
    "text": "Stage 4: GitHub Pages Deployment\nReturn to the GitHub repo you created; recall that the URL is something like:\nhttps://github.com/&lt;GITHUB_USERNAME&gt;/STA9750-2024-FALL\nOpen the “Settings” menu and proceed to the “Pages” submenu. You should see a page that looks like this:\n\nUnder Build and Deployment, set the main branch to deploy and select the docs directory on that branch. Hit save and your website will go live!\nTo check your website is working, proceed to\nhttps://&lt;GITHUB_USERNAME&gt;.github.io/STA9750-2024-FALL\nIf everything works, you will see your site! (If you used the Render feature in RStudio, it should look familiar.)\nIf you get stuck, use the course discussion board to seek help from your classmates and, if necessary, the instructor."
  },
  {
    "objectID": "miniprojects/mini00.html#stage-5-submission",
    "href": "miniprojects/mini00.html#stage-5-submission",
    "title": "Mini-Project #00: Course Set-Up",
    "section": "Stage 5: Submission",
    "text": "Stage 5: Submission\nOnce your site is live, you will submit it to the instructor in two ways:\n\nLog into the course discussion board (Piazza) and send me your GitHub name so I can link it to my gradebook.\nTag @michaelweylandt on GitHub to make sure I can access your repo.\n\nThese both must be completed to complete the assignment and verify enrollment.\n\nDiscussion Board (Piazza)\nFirst, send me a private message through the course discussion board with the following details:\n\nReal Name\nCUNY EmplID (8 digit ID code)\nCUNY email\nGitHub user name\nWhich course section you are enrolled in: STA 9750 or OPR 9750\n\nThis is the only place where you are required to connect your GitHub ID with your real name and CUNY credentials. I need this information to connect your public activity with my (private) gradebook and the CUNY system.\nIf all your information looks good, I might not reply through the discussion board. When I reply through GitHub, I’m acknowledging both parts of your submission.\n\n\nInstructor Tagging\nFinally, you’re going to contact me through GitHub: go to\nhttps://github.com/&lt;GITHUB_USERNAME&gt;/STA9750-2024-FALL/issues/new\nto open a new issue. Title the issue STA9750 &lt;GITHUB_USERNAME&gt; MiniProject #00 and fill in the following text for the issue:\nHi @michaelweylandt!\n\nI've created my STA9750 website - check it out!\n\nhttps://&lt;GITHUB_USERNAME&gt;.github.io/STA9750-2024-FALL\n(Replace &lt;GITHUB_USERNAME&gt; with your username throughout.)\n\nThis will send me a notification through GitHub and I will confirm that I can access your repository and website. If you don’t do this, I may not be able to access your graded assignments when you submit them! I will confirm that I have your real ID verified as well."
  },
  {
    "objectID": "miniprojects/mini00.html#wrap-up",
    "href": "miniprojects/mini00.html#wrap-up",
    "title": "Mini-Project #00: Course Set-Up",
    "section": "Wrap-Up",
    "text": "Wrap-Up\nOnce I acknowledge receipt of your ID and website, you’re done with Mini-Project #00! You’ve built a website and are ready for the course to begin in earnest.\nMini-Projects #01-#04 will be submitted as separate pages in your website (different quarto documents) and hosted via GitHub pages for peer feedback. We will discuss that process in more detail after Mini-Project #00 is complete."
  },
  {
    "objectID": "miniprojects/mini00.html#hints",
    "href": "miniprojects/mini00.html#hints",
    "title": "Mini-Project #00: Course Set-Up",
    "section": "Hints",
    "text": "Hints\nIf you need help, the course discussion board should be your first stop.\nIf you want to personalize your website further, you can see how I have created mine on GitHub. Recall that the Markdown syntax used by quarto is summarized at https://www.markdownguide.org/basic-syntax/.\nYou may want to use the postcards package to build a more attractive home page."
  },
  {
    "objectID": "miniprojects/mini00.html#footnotes",
    "href": "miniprojects/mini00.html#footnotes",
    "title": "Mini-Project #00: Course Set-Up",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nEarly in the course, I will ‘scaffold’ most of the analysis, leaving only some small steps for you to fill in. As the course progresses, the mini-projects will be more self-directed.↩︎\nAlternatively, simply go to https://github.com/new after logging in.↩︎\nYou can leave the next two boxes blank or set a custom directory name and location. RStudio’s defaults are reasonable; the default directory name will simply be STA9750-2024-FALL and it will be located in your home directory.↩︎\nIf you choose to complete the course using a pseudonym, make up something fun. If you are using your real name, this is a great place to state that you are a Baruch student, your expected graduation date, your field of employment (current or desired), and one or two personal facts. This, along with a LinkedIn page, will quickly become one of the first things that comes up when a potential employer searches your name, so make a good impression!↩︎"
  },
  {
    "objectID": "preassigns/pa02.html",
    "href": "preassigns/pa02.html",
    "title": "STA 9750 Week 2 Pre Assignment: Getting Started with Markdown",
    "section": "",
    "text": "Due Date: 2024-09-04 (Wednesday) at 11:45pm.\nSubmission: CUNY Brightspace\nThis week, we are going to learn to use quarto, a data science publishing platform. quarto documents are written using Markdown, a light-weight mark-up language.12\nFor this week’s pre-assignment, complete this interactive Markdown tutorial, which should take you about 10 minutes. Once you’ve familiarized yourself with Markdown, take a look at the source code for this website and see how certain Markdown documents are rendered as web pages.\nDuring this week’s lab session, we will take particular advantage of:\nso make sure to pay attention to those parts of the tutorial.\nAfter you are done with the introduction to Markdown, log in to CUNY Brightspace and complete the Pre-Assignment 02 “Getting to Know You” quiz. As part of this quiz, you will be asked to attest that you successfully completed the Markdown tutorial."
  },
  {
    "objectID": "preassigns/pa02.html#footnotes",
    "href": "preassigns/pa02.html#footnotes",
    "title": "STA 9750 Week 2 Pre Assignment: Getting Started with Markdown",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nGet it? If you learn nothing else in this class, you will certainly learn that programmers love terrible puns. R itself is actually a pun as it was originally a free ‘knock-off’ of the S programming language developed by Ross and Rob.↩︎\nA mark-up language is a way of specifying the formatting applied to given text. It exists somewhere between “plain text” and a full document format like a .docx file. Other markup languages include HTML (hyper text markup language), rST (reStructured Text), LaTeX (used for scientific typesetting), and many others. Markdown is the simplest of these and the only one you will be required to write in this course. You will need to learn a bit of how HTML is structured and, if you are including math in your mini-project or final project submissions, a bit of LaTeX will go a long way.↩︎"
  },
  {
    "objectID": "preassigns/pa12.html",
    "href": "preassigns/pa12.html",
    "title": "STA 9750 Week 12 Pre-Assignment: Strings and Things",
    "section": "",
    "text": "This week, we begin to study the world of text data. While numerical data is reasonably straight-forward to deal with, text data is remarkably complex. A full discussion of text data requires understanding the vast world of human written language, but we will discuss enough of the major points to hopefully solve 95% of the challenges you will face in your career."
  },
  {
    "objectID": "preassigns/pa12.html#goals",
    "href": "preassigns/pa12.html#goals",
    "title": "STA 9750 Week 12 Pre-Assignment: Strings and Things",
    "section": "Goals",
    "text": "Goals\nIn our quest to understand text data, we have two major goals:\n\nUnderstanding String Encodings and Unicode\nManipulating Strings with Regular Expressions\n\nBefore we get into these, let’s begin with a basic review of the character data type in R."
  },
  {
    "objectID": "preassigns/pa12.html#string-vectors",
    "href": "preassigns/pa12.html#string-vectors",
    "title": "STA 9750 Week 12 Pre-Assignment: Strings and Things",
    "section": "String Vectors",
    "text": "String Vectors\nRecall that R works by default on vectors - ordered collections of the “same sort” of thing. R supports the following vector types:\n\nRaw for pure access to bytes without any additional meaning: rarely useful for pure data-analytic work\nInteger: 32-bit signed integers, ranging from \\(-2^{30}\\) to \\(2^{30}-1\\). (If you have done low-level work before, you might ask where the extra bit went: it’s used for encoding NA values.)\nNumeric: 64-bit (double precision) floating point values, ranging from (approximately) \\(\\pm 10^{308}\\). The detailed behavior of numeric (often called double) data is beyond this course, but it is well documented elsewhwere.\nCharacter: the topic of today’s discussion.\n\nR makes no difference between a character - in the sense of a single letter - and a string: in particular, each element of a character vector is an (arbitrary length) string. Specialized functions are required for work at the true “single letter” scale. If you come from other languages, this behavior might be surprising, but it allows R to handle much of the complexity associated with characters automagically, which greatly simplifies data analysis.\nWhen speaking, we refer to R as using strings, even if R itself calls them character elements for historical reasons."
  },
  {
    "objectID": "preassigns/pa12.html#encoding",
    "href": "preassigns/pa12.html#encoding",
    "title": "STA 9750 Week 12 Pre-Assignment: Strings and Things",
    "section": "Encoding",
    "text": "Encoding\nHow are strings represented on a computer? The answer has evolved over time, but the current state of the art - used by almost all non-legacy software - is based on the Unicode system and the UTF-8 encoding.\nThe Unicode system is comprised of two essential parts: - A numbered list of “letter-like” elements - Rules for manipulating those elements\nWhile this seems simple, it is anything but. The history of string representations in computers is a long and painful story of programmers repeatedly underestimating the complexity of the seemingly simple task of listing “all the letters.”\nThe Unicode consortium makes a long list of characters that computers should be able to represent: the most recent version of the Unicode standard includes 149,813 characters divided into 161 scripts. These include everything from the basic (Anglo-American) Latin alphabet to the Greek and Cyrillic alphabets to Chinese and Japanese characters to the undeciphered Linear A alphabet and Tengwar, the fictional script used in the Lord of the Rings novels. The Unicode standard also includes a wide set of Emoji (approximately 4000) and many “modifying” characters.\nTo each of these, the Unicode consortium assigns a code point : a numerical identifier. Even superficially similar characters may be assigned different code points to distinguish them: for example, “H” is code point U+0048 with the official description “Latin Capital Letter H” while “Η” is U+0397, “Greek Capital Letter Eta.”\nThe difference between these characters is essential to know how to manipulate them:\n\n\n\n\n\n\n\n\nUse the tolower function to lower-case each of these:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Unicode standard defines the lower case mapping of U+0048 as the Latin lower case h, while the lower case mapping of U+0397 as the Greek lower case eta, which looks something like a streched n. \nIn general, these mappings are incredibly complicated and depend not only on the specific code point, but also the set of translation rules being used. (Certain languages have different lower/upper mappings for what are otherwise the same letter.)\nWhile you don’t need to know all of this complexity, it is essential to know that it’s out there and to rely on battle-tested libraries to perform these mappings.\nUnicode is supplemented by the UTF-8 encodings, which controls how 0/1-bit strings are actually translated to code points. (Fonts then map code points to what you see on the screen.) UTF-8 is more-or-less back-compatible with other major encodings, so it’s a good default. When dealing with modern websites or public data sources, they almost always present their contents in a UTF-8 compatible encoding (if not UTF-8 proper) so you should be ok.\nA well-formatted website will state its encoding near the top of the page:\n\nlibrary(rvest)\nread_html(\"https://baruch.cuny.edu\") |&gt;\n    html_elements(\"meta[charset]\") |&gt;\n    html_attr(\"charset\")\n\n[1] \"UTF-8\"\n\n\nAdvice: Whenever possible, make sure you are using UTF-8 strings: if your data is not UTF-8, reencode it to UTF-8 as soon as possible. This will save you much pain."
  },
  {
    "objectID": "preassigns/pa12.html#string-manipulation",
    "href": "preassigns/pa12.html#string-manipulation",
    "title": "STA 9750 Week 12 Pre-Assignment: Strings and Things",
    "section": "String Manipulation",
    "text": "String Manipulation\nOnce data is in R and encoded as UTF-8 Unicode points, we have several tools for dealing with strings. Your first port of call should be the stringr package.\nAll the functions of the stringr package start with str_ and take a vector of strings as the first argument, making them well suited for chained analysis.\nLet’s start with str_length which simply computes the length of each element. For the basic Latin alphabet, this more or less matches our intuition:\n\nlibrary(stringr)\nx &lt;- c(\"I\", \"am\", \"a\", \"student\", \"at\", \"Baruch.\")\nstr_length(x)\n\n[1] 1 2 1 7 2 7\n\n\nbut it can be tricky for strings that involve Unicode combining characters.\n\nstr_length(\"X̅\")\n\n[1] 2\n\n\nHere the “overbar” is a combining character which we add on to the X. This is commonly (though not always) used for languages with accents (e.g. French) or for languages where vowels are written above and below the main script (Arabic or Hebrew). This same idea is used for certain Emoji constructs:\n\nstr_length(\"👨🏿\")\n\n[1] 2\n\n\nHere, “Man with Dark Skin Tone” is the combination of “Man” and “Dark Skin Tone.” (Compare how this appears in the rendered document to how RStudio prints it.)\nWhile there is complexity in all of Unicode, str_length will behave as you might expect for “regular” text. I’m going to stop showing the “scary case” of Unicode, but you should be aware of it for the remainder of these exercises.\n\nConcatenation\nYou have already seen the base paste and paste0 functions for combining two string vectors together.\n\nx &lt;- c(\"Michael\", \"Mary\", \"Gus\")\ny &lt;- c(\"Son\", \"Daughter\", \"Dog\")\n\npaste(x, y)\n\n[1] \"Michael Son\"   \"Mary Daughter\" \"Gus Dog\"      \n\n\nBy default, paste combines strings with a space between them, while paste0 omits the space. paste is typically what you want for strings for human reading, while paste0 is a better guess for computer-oriented text (e.g., putting together a URL).\nYou can change the separator by passing a sep argument to paste:\n\npaste(x, y, sep = \" is my \")\n\n[1] \"Michael is my Son\"   \"Mary is my Daughter\" \"Gus is my Dog\"      \n\n\nYou can also combine together multiple elements of a vector using the collapse argument:\n\npaste(x, collapse = \" and \")\n\n[1] \"Michael and Mary and Gus\"\n\n\n\nExercises:\nUsing the paste function, make a vector of strings like “John’s favorite color is blue”:\n\npeople &lt;- c(\"John\", \"Jane\", \"Randy\", \"Tammi\")\ncolors &lt;- c(\"blue\", \"orange\", \"grey\", \"chartreuse\")\n\nModify your answer to write a (run-on) sentence of favorite colors: “John’s favorite color is blue and Jane’s favorite color is orange and …”\n\npeople &lt;- c(\"John\", \"Jane\", \"Randy\", \"Tammi\")\ncolors &lt;- c(\"blue\", \"orange\", \"grey\", \"chartreuse\")\n\n\n\n\nSubstring Selection\nWhen cleaning up data for analysis, it is common to need to take substrings from larger text. The str_sub function will do this:\n\nx &lt;- c(\"How\", \"much\", \"is\", \"that\", \"puppy\", \"in\", \"the\", \"window?\")\nstr_sub(x, 1, 2)\n\n[1] \"Ho\" \"mu\" \"is\" \"th\" \"pu\" \"in\" \"th\" \"wi\"\n\n\nIf you want to go all the way to the end, set the end element to -1:\n\nstr_sub(x, 2, -1)\n\n[1] \"ow\"     \"uch\"    \"s\"      \"hat\"    \"uppy\"   \"n\"      \"he\"     \"indow?\"\n\n\n\nExercises\nUsing str_sub, remove the system name (CUNY or UC) and return only the campus name:\n\nlibrary(stringr)\nuc_schools &lt;- c(\"UC Berkeley\", \"UC San Diego\", \"UC Santa Cruz\", \"UC Davis\")\ncuny_schools &lt;- c(\"Baruch College, CUNY\", \"City College, CUNY\", \"La Guardia Community College, CUNY\")\nstr_sub(uc_schools)\n\n[1] \"UC Berkeley\"   \"UC San Diego\"  \"UC Santa Cruz\" \"UC Davis\"     \n\n\n\n\n\nDetect and Matching\nOften we only need to know whether a particular substring is present in a larger string. We can use str_detect to do this:\n\nlibrary(stringr)\ndogs &lt;- c(\"basset hound\", \"greyhound\", \"labrador retreiver\", \"border collie\", \"Afgahn hound\")\nstr_detect(dogs, \"hound\")\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE\n\n\nThe str_match function will return the text of the match. Here it’s useless, but we’ll see that it becomes more powerful when we allow more flexible pattern specifications.\n\nlibrary(stringr)\ndogs &lt;- c(\"basset hound\", \"greyhound\", \"labrador retreiver\", \"border collie\", \"Afgahn hound\")\nstr_match(dogs, \"hound\")\n\n     [,1]   \n[1,] \"hound\"\n[2,] \"hound\"\n[3,] NA     \n[4,] NA     \n[5,] \"hound\"\n\n\n\nExercises\nUse str_detect to find the CUNY schools:\n\nlibrary(stringr)\nschools &lt;- c(\"UC Davis\", \n             \"UC Santa Cruz\", \n             \"City College, CUNY\", \n             \"UC Berkeley\", \n             \"La Guardia Community College, CUNY\", \n             \"Baruch College, CUNY\", \n             \"UC San Diego\")\nstr_sub(uc_schools)\n\n[1] \"UC Berkeley\"   \"UC San Diego\"  \"UC Santa Cruz\" \"UC Davis\"     \n\n\n\n\n\nSpecifying Patterns\nWhile working by individual characters is sometimes useful (for very regular data), we generally need more powerful tools: regular expressions (RE) provide a compact language for specifying patterns in strings. We’ll introduce the basics here to help with string functions and then explore some more advanced RE features.\nThe most basic pattern is a set of elements in brackets: this means “any of these”.\nFor example, we want to see which names have an “A” in them:\n\nnames &lt;- c(\"Jane\", \"Rhonda\", \"Reggie\", \"Bernie\", \"Walter\", \"Arthur\")\nstr_detect(names, \"a\") ## Wrong!\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE FALSE\n\nstr_detect(names, \"A\") ## Wrong!\n\n[1] FALSE FALSE FALSE FALSE FALSE  TRUE\n\nstr_detect(names, \"[Aa]\") ## Right!\n\n[1]  TRUE  TRUE FALSE FALSE  TRUE  TRUE\n\n\nAlternatively, we can see which strings contain numbers:\n\nx &lt;- c(\"73 cows\", \"47 chickens\", \"a dozen eggs\")\nstr_detect(x, \"[0123456789]\")\n\n[1]  TRUE  TRUE FALSE\n\n\nIf we use str_match we can pull out the matching element:\n\nx &lt;- c(\"2 burgers\", \"3 soups\", \"5 fish\")\nstr_match(x, \"[0123456789]\")\n\n     [,1]\n[1,] \"2\" \n[2,] \"3\" \n[3,] \"5\" \n\n\nBy default, this only finds one appearance of the pattern:\n\nx &lt;- c(\"23 burgers\", \"34 soups\", \"56 fish\")\n\n# Why is this wrong?\nstr_match(x, \"[0123456789]\")\n\n     [,1]\n[1,] \"2\" \n[2,] \"3\" \n[3,] \"5\" \n\n\nWe can modify the pattern specifier to include count information. The basic behavior is to add explicit count bounds:\n\nx &lt;- c(\"2 burgers\", \"34 soups\", \"567 fish\")\nstr_match(x, \"[0123456789]{2}\")\n\n     [,1]\n[1,] NA  \n[2,] \"34\"\n[3,] \"56\"\n\nstr_match(x, \"[0123456789]{3}\")\n\n     [,1] \n[1,] NA   \n[2,] NA   \n[3,] \"567\"\n\nstr_match(x, \"[0123456789]{2,3}\")\n\n     [,1] \n[1,] NA   \n[2,] \"34\" \n[3,] \"567\"\n\nstr_match(x, \"[0123456789]{2,}\")\n\n     [,1] \n[1,] NA   \n[2,] \"34\" \n[3,] \"567\"\n\n\nHere a single number is an exact count ({2}), while pairs ({2,3}) specify a range. If one end of the range is left empty, it is 0 or infinite (depending on the direction).\nCertain count specifications are sufficiently useful to get their own syntax:\n\nOne or more: + is equivalent to {1,}\nZero or more: * is equivalent to {0,}\nOne or zero: ? is equivalent to {0,1}.\n\nUse these specifications for the next set of exercises.\n\nExercises\nWhich strings contain a three digit number?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstr_detect(x, \"\\\\d{3}\")\nstr_detect(x, \"\\\\d{3}\")\n\n\n\n\n\n\n\n\n\nCombining patterns\nYou can combine REs to make more complex patterns:\n\n(a|b) means a or b. This is like [] notation but a, b can be more complex than single characters\n\n\nx &lt;- c(\"Baruch College, CUNY\", \"UC Berkeley\", \"Harvard University\")\nstr_detect(x, \"(CUNY|UC)\")\n\n[1]  TRUE  TRUE FALSE\n\n\n\n[^abc] means anything other than a, b, c. You can often achieve a similar effect using the negate argument to str_detect, but you need this specifically for str_match\n\n\nx &lt;- c(\"10 blue fish\", \"three wet goats\", \"15 otters in hats\")\nstr_detect(x, \"[^0123456789]\")\n\n[1] TRUE TRUE TRUE\n\n\n\n^ outside of a bracket denotes the start of a line:\n\n\nx &lt;- c(\"rum\", \"white rum\", \"flavored rum\")\nstr_detect(x, \"^rum\")\n\n[1]  TRUE FALSE FALSE\n\n\n\n$ denotes the end of a line:\n\n\nx &lt;- c(\"bourbon whiskey\", \"scotch whisky\", \"whiskey liqueurs\")\nstr_detect(x, \"whisk[e]?y$\")\n\n[1]  TRUE  TRUE FALSE\n\n\nSee the stringr RE docs for more examples of regular expressions.\n\nExercises\n\nUse a regular expression to find which of these are fish species:\n\n\n\n\n\n\n\n\n\n\nUse a regular expression to find words with three or more vowels in a row:\n\n\n\n\n\n\n\n\n\n\nFind the words where “q” is not followed by a “u”\n\n\n\n\n\n\n\n\n\n\n\n\nReplacement\nThe str_replace function allows us to replace a string with something else. This is particularly useful when cleaning up text:\n\nx &lt;- c(\"Manhattan, NY\", \"Bronx, New York\", \"Brooklyn, ny\", \"Queens, nY\")\nstr_replace(x, \"([nN][yY]|New York)\", \"NY\")\n\n[1] \"Manhattan, NY\" \"Bronx, NY\"     \"Brooklyn, NY\"  \"Queens, NY\""
  },
  {
    "objectID": "objectives.html",
    "href": "objectives.html",
    "title": "STA 9750 - Course Learning Objectives",
    "section": "",
    "text": "This course provides an understanding of the principles and concepts of using computer tools for data analysis and visualization. Students will learn to use a scientific programming language (such as R) to import and export data from and into spreadsheets or other statistical software packages. They will gain experience in analyzing both quantitative and qualitative data, and statistical modelling techniques will be introduced. Written reports will prepare students for clear communication of their analysis in professional settings. This course is designed primarily for Masters’ students in statistics and quantitative methods and modeling (QMM), and those interested in carrying out sophisticated statistical analyses of data using statistical software.\n\n\n\nThis course provides an understanding of the principles and concepts of using computer tools for data analysis. Students will learn to use the SAS programming language to handle the collection, editing and storing of large datasets, as well as to simulate data, import and export data from and into spreadsheets or other statistical software packages. They will gain experience in analyzing both quantitative and qualitative data, as well as repeated measure data. Written projects and class presentation will prepare students for clear communication of their analysis in professional settings. This course is designed primarily for statistics and quantitative methods and modeling (QMM) majors, PhD candidates, and those interested in carrying out sophisticated statistical analyses of data using statistical software.\nInstructor’s Note: Contra the official OPR 9750 description, this course will be taught using R not SAS. STA 9750 and OPR 9750 will be jointly taught and graded. Please consult with your degree program director to determine which listing is appropriate for you."
  },
  {
    "objectID": "objectives.html#official-course-description",
    "href": "objectives.html#official-course-description",
    "title": "STA 9750 - Course Learning Objectives",
    "section": "",
    "text": "This course provides an understanding of the principles and concepts of using computer tools for data analysis and visualization. Students will learn to use a scientific programming language (such as R) to import and export data from and into spreadsheets or other statistical software packages. They will gain experience in analyzing both quantitative and qualitative data, and statistical modelling techniques will be introduced. Written reports will prepare students for clear communication of their analysis in professional settings. This course is designed primarily for Masters’ students in statistics and quantitative methods and modeling (QMM), and those interested in carrying out sophisticated statistical analyses of data using statistical software.\n\n\n\nThis course provides an understanding of the principles and concepts of using computer tools for data analysis. Students will learn to use the SAS programming language to handle the collection, editing and storing of large datasets, as well as to simulate data, import and export data from and into spreadsheets or other statistical software packages. They will gain experience in analyzing both quantitative and qualitative data, as well as repeated measure data. Written projects and class presentation will prepare students for clear communication of their analysis in professional settings. This course is designed primarily for statistics and quantitative methods and modeling (QMM) majors, PhD candidates, and those interested in carrying out sophisticated statistical analyses of data using statistical software.\nInstructor’s Note: Contra the official OPR 9750 description, this course will be taught using R not SAS. STA 9750 and OPR 9750 will be jointly taught and graded. Please consult with your degree program director to determine which listing is appropriate for you."
  },
  {
    "objectID": "objectives.html#course-learning-objectives",
    "href": "objectives.html#course-learning-objectives",
    "title": "STA 9750 - Course Learning Objectives",
    "section": "Course Learning Objectives",
    "text": "Course Learning Objectives\nStudents successfully completing STA/OPR 9750 will be able to:\n\nEffectively communicate the reuslts of data analyses.\nManipulate tabular data in R\nDevelop effective and compelling visualizations using standard statistical software\nManipulate `wild-caught’ data from web-based sources\nUse computational approaches to statistical inference\nDevelop novel analytical products to convey actionable insights.\n\nThe following course elements contribute to these goals:\n\nContribution of Course Elements to Learning Goals\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goal 1\nLearning Goal 2\nLearning Goal 3\nLearning Goal 4\nLearning Goal 5\nLearning Goal 6\n\n\n\n\nMini-Project #00\n✓\n\n\n\n\n\n\n\nMini-Project #01\n✓\n✓\n\n\n\n\n\n\nMini-Project #02\n✓\n✓\n✓\n\n\n\n\n\nMini-Project #03\n✓\n✓\n✓\n✓\n\n\n\n\nMini-Project #04\n✓\n✓\n✓\n✓\n✓\n\n\n\nCourse Project\n✓\n✓\n✓\n✓\n✓\n✓"
  },
  {
    "objectID": "objectives.html#program-learning-goals",
    "href": "objectives.html#program-learning-goals",
    "title": "STA 9750 - Course Learning Objectives",
    "section": "Program Learning Goals",
    "text": "Program Learning Goals\nThis course contributes to the program learning goals of several MS programs offered by the Zicklin School of Business.\n\nMS in Business Analytics\nThis course contributes to the following Program Learning Goals for the MS in Business Analytics:\n\nMSBA Program Learning Goals\n\n\n\n\n\n\n\nSTA 9750 Learning Goal\nMSBA Learning Goal\nDescription\n\n\n\n\n✓\nData Management\nStudents will be able to apply methods, tools, and software for acquiring, managing/storing, and accessing structured and unstructured data. Students will also demonstrate knowledge of the strategic uses of data.\n\n\n✓\nFoundational Statistical / Quantitative Skills\nStudents will be able to prepare data for statistical analysis, perform basic exploratory and descriptive analysis as well as employ foundational statistical techniques needed to analyze data.\n\n\n✓\nAdvanced Statistical/Quantitative Skills\nStudents will be able to build and interpret advanced predictive models. Students will be able to combine business rules and mathematical models to optimize business decisions from data.\n\n\n\nEthical Awareness\nStudents will be able to articulate an understanding of ethical issues in all phases of business analytics with particular emphasis on the new possibilities afforded by the emergence of big data.\n\n\n✓\nProfessional Communication\nStudents will be able to explain complex analytical models and their results orally and in writing to technical and non technical/lay audiences.\n\n\n✓\nKnowledge Integration\nStudents will be able to apply the three key types of analytics (descriptive, predictive, and prescriptive) in a business domain to add value to business decision-making.\n\n\n\n\n\nMS in Quantitative Methods & Modeling\nThis course contributes to the following Program Learning Goals for the MS in Quantitative Methods & Modeling:\n\nMSQMM Program Learning Goals\n\n\n\n\n\n\n\nSTA 9715 Learning Goal\nMSQMM Learning Goal\nDescription\n\n\n\n\n✓\nOperations Research & Mathematical Modeling\nStudents will be able to effectively model, evaluate, and solve quantitative (business) problems using quantitative modeling methods (e.g. deterministic and probabilistic operations research techniques).\n\n\n✓\nStatistics\nStudents will be able to correctly apply appropriate statistical methods when defining, solving, and analyzing problems.\n\n\n✓\nTechnology Competency\nStudents will be able to use current technological tools, including spreadsheets and specialized software, when solving problems.\n\n\n✓\nProfessional Communication\nStudents will be able to effectively communicate their problem solving methods and solutions to technical and non-technical audiences.\n\n\n\n\n\nMS in Statistics\nThis course contributes to the following Program Learning Goals for the MS in Statistics:\n\nMS Statistics Program Learning Goals\n\n\n\n\n\n\n\nSTA 9715 Learning Goal\nMS Stat Learning Goal\nDescription\n\n\n\n\n✓\nGeneral Statistical Competence\nStudents will be able to apply appropriate probability models and statistical techniques when analyzing problems frm business and other fields.\n\n\n✓\nStatistical Practice\nStudents will become familiar with the standard tools of statistical practice for multiple regression, along with the tools of a subset of specialized statistical areas such as multivariate analysis, applied sampling, time series analysis, experimental design, data mining, categorical analysis, and/or stochastic processes.\n\n\n✓\nTechnology Competency\nStudents will learn to use one or more of the benchmark statistical software platforms, such as SAS or R."
  },
  {
    "objectID": "preassignments.html",
    "href": "preassignments.html",
    "title": "STA/OPR 9750 - Pre-Assignments",
    "section": "",
    "text": "In lieu of traditional homework, STA/OPR 9750 has weekly pre-assignments designed to achieve several interlocking goals:\n\nProvide initial exposure to that week’s topic before the lecture and lab session\nAllow students with less previous programming experience more time to familiarize themselves with that week’s topic\nAllow students to submit questions to be covered in class\n\nEach Pre-Assignment will be submitted via CUNY Brightspace and due the night before class (Wednesdays at 11:45). These are short assignments, typically only a few questions, so extensions will not be given outside of exceptional circumstances.\n\nPre-Assignments\n\nPre-Assignment for Week #01\nNone.\n\n\nPre-Assignment for Week #02\nDue Date:\n\nReleased to Students: 2024-08-29\nDue on Brightspace: 2024-09-04 at 11:45pm\n\nIn this Pre-Assignment, you will familiarize yourself with the basics of Markdown, an easy way to write and format documents. In class, we will use Markdown based tools to create dynamic data analysis documents seamlessly combining code, text, and graphics.\n\n\nPre-Assignment for Week #03\nDue Date:\n\nReleased to Students: 2024-09-05\nDue on Brightspace: 2024-09-11 at 11:45pm\n\nTBA\n\n\nPre-Assignment for Week #04\nDue Date:\n\nReleased to Students: 2024-09-12\nDue on Brightspace: 2024-09-18 at 11:45pm\n\nTBA\n\n\nPre-Assignment for Week #05\nDue Date:\n\nReleased to Students: 2024-09-19\nDue on Brightspace: 2024-09-25 at 11:45pm\n\nTBA\n\n\nPre-Assignment for Week #06\nNone.\nThe 2024-10-10 class session will be dedicated to Course Project Proposals.\n\n\nPre-Assignment for Week #07\nDue Date:\n\nReleased to Students: 2024-10-10\nDue on Brightspace: 2024-10-16 at 11:45pm\n\nTBA\n\n\nPre-Assignment for Week #08\nDue Date:\n\nReleased to Students: 2024-10-17\nDue on Brightspace: 2024-10-23 at 11:45pm\n\nTBA\n\n\nPre-Assignment for Week #09\nDue Date:\n\nReleased to Students: 2024-10-24\nDue on Brightspace: 2024-10-30 at 11:45pm\n\nTBA\n\n\nPre-Assignment for Week #10\nNone.\nThe 2024-11-07 class session will be dedicated to Course Project Mid-Semester Check-Ins.\n\n\nPre-Assignment for Week #11\nDue Date:\n\nReleased to Students: 2024-11-07\nDue on Brightspace: 2024-11-13 at 11:45pm\n\nTBA\n\n\nPre-Assignment for Week #12\nDue Date:\n\nReleased to Students: 2024-11-14\nDue on Brightspace: 2024-11-20 at 11:45pm\n\nTBA\n\n\nPre-Assignment for Week #13\nDue Date:\n\nReleased to Students: 2024-11-28\nDue on Brightspace: 2024-12-04 at 11:45pm\n\nTBA\n\n\nPre-Assignment for Week #14\nNone.\nThe 2024-12-12 class session will be dedicated to Course Project Final Presentations."
  }
]