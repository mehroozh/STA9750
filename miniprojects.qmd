---
title: "{{< var course.short >}} - Mini Projects"
---

```{r echo=FALSE, message=FALSE}
library(tidyverse)
DATES <- readr::read_csv("key_dates.csv") |>
    rename(element=`Course Element`,
           item=`Item Number`) |>
    mutate(dt = case_when(is.na(Time) ~ as.character(Date),
                          TRUE ~ paste(Date, Time)))
```

In lieu of traditional homework, {{< var course.short >}} has a series of
**mini-projects** designed to achieve several interlocking goals: 

1. Improve your skills at data analysis
2. Improve your improve your ability to give feedback on data analysis work
3. Seed a 'portfolio' of data science work you can demonstrate to potential employers

Each Mini-Project will be submitted via `GitHub`, an industry-standard code management
platform, as both raw analysis code and as a HTML document hosted on GitHub pages.

After each Mini-Project is submitted, 2-3 peer reviewers will be assigned to give
feedback and to assign an initial grade following an instructor provided rubric.
This feedback will be given *via* GitHub Issues. 

In order to ensure good peer feedback, the peer feedback will be evaluated by 
the instructor in a "meta-review" worth a small fraction of the overall grade. 

If you believe your mini-project has received inaccurate peer feedback, please
contact the instructor directly within **48 hours** of the peer feedback deadline.
No student-initiated requests for re-grading will be accepted after that time, though
the instructor may re-grade the work during the meta-review stage.


### Mini-Projects

#### Mini-Project #00: Course Set-Up

```{r echo=FALSE}
mp <-  DATES |> filter(element == "Mini-Projects", item == 0)
```

**Due Dates:**

  - Released to Students: `{r} mp |> filter(str_detect(Details, "Mini-Project Released")) |> pull(dt)`
  - **Initial Submission: `{r} mp |> filter(str_detect(Details, "Mini-Project Due")) |> pull(dt)`**
  - **Peer Feedback:**
    - Peer Feedback Assigned: `{r} mp |> filter(str_detect(Details, "Mini-Project Peer Feedback Assigned")) |> pull(dt)`
    - **Peer Feedback Due: `{r} mp |> filter(str_detect(Details, "Mini-Project Peer Feedback Due")) |> pull(dt)`**

In the ungraded [Mini-Project #00](./miniprojects/mini00.html), there is no data
analysis required, but you will set up the basic web tooling used to submit projects
#01 to #04. 

Note that, even though ungraded, Mini-Project #00 must be completed to remain
enrolled in this course and before any other Mini-Projects can be submitted. 

#### Mini-Project #01: Fiscal Characteristics of Major US Public Transit Systems

```{r echo=FALSE}
mp <-  DATES |> filter(element == "Mini-Projects", item == 1)
```

**Due Dates:**

  - Released to Students: `{r} mp |> filter(str_detect(Details, "Mini-Project Released")) |> pull(dt)`
  - **Initial Submission: `{r} mp |> filter(str_detect(Details, "Mini-Project Due")) |> pull(dt)`**
  - **Peer Feedback:**
    - Peer Feedback Assigned: `{r} mp |> filter(str_detect(Details, "Mini-Project Peer Feedback Assigned")) |> pull(dt)`
    - **Peer Feedback Due: `{r} mp |> filter(str_detect(Details, "Mini-Project Peer Feedback Due")) |> pull(dt)`**
    
In [Mini-Project #01](./miniprojects/mini01.html), students will investigate
the fiscal characteristics of US public transit authorities. In this project,
I handle the data import and tidying; students are mainly responsible for "single table" `dplyr` operations (`mutate`, `group_by`, `summarize`, 
`select`, `arrange`, `rename`) to produce summary statistics. 

#### Mini-Project #02: Business of Show Business

```{r echo=FALSE}
mp <-  DATES |> filter(element == "Mini-Projects", item == 2)
```

**Due Dates:**

  - Released to Students: `{r} mp |> filter(str_detect(Details, "Mini-Project Released")) |> pull(dt)`
  - **Initial Submission: `{r} mp |> filter(str_detect(Details, "Mini-Project Due")) |> pull(dt)`**
  - **Peer Feedback:**
    - Peer Feedback Assigned: `{r} mp |> filter(str_detect(Details, "Mini-Project Peer Feedback Assigned")) |> pull(dt)`
    - **Peer Feedback Due: `{r} mp |> filter(str_detect(Details, "Mini-Project Peer Feedback Due")) |> pull(dt)`**
    

In [Mini-Project #02](./miniprojects/mini02.html), students will act as Hollywood 
development executives, diving deep into Hollywood history to develop a pitch
for a new movie. Students develop their skills in working with large ($\approx 20$ GB) data and in working with relational data structures (`join`s and their kin).
This project uses the [IMDb Non-Commerical Data Release](https://developer.imdb.com/non-commercial-datasets/). 

#### Mini-Project #03: Exploring the Effect of State-Level Electoral College Vote Allocation on Presidential Elections

```{r echo=FALSE}
mp <-  DATES |> filter(element == "Mini-Projects", item == 3)
```

**Due Dates:**

  - Released to Students: `{r} mp |> filter(str_detect(Details, "Mini-Project Released")) |> pull(dt)`
  - **Initial Submission: `{r} mp |> filter(str_detect(Details, "Mini-Project Due")) |> pull(dt)`**
  - **Peer Feedback:**
    - Peer Feedback Assigned: `{r} mp |> filter(str_detect(Details, "Mini-Project Peer Feedback Assigned")) |> pull(dt)`
    - **Peer Feedback Due: `{r} mp |> filter(str_detect(Details, "Mini-Project Peer Feedback Due")) |> pull(dt)`**
    


In [Mini-Project #03](./miniprojects/mini03.html), students
will analyze the effect of the US Electoral College on US
Presidential elections, with an eye towards "fairness" and 
proportionality. They will compare different ways that states
allocate their Electoral College Votes to determine whether
this has any systematic effect on who is elected the President
of these United States. 

Students will gain experience visualizing spatial data
through the use of "red/blue electoral maps", working with
official electoral records, and systematically accessing
public data repositories, such as those of the US Census
Bureau. This project uses data from the [MIT Election
Lab](https://electionlab.mit.edu/data) and from the Census
Bureau's [TIGER](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html) repository.


#### Mini-Project #04: TBA

```{r echo=FALSE}
mp <-  DATES |> filter(element == "Mini-Projects", item == 4)
```

**Due Dates:**

  - Released to Students: `{r} mp |> filter(str_detect(Details, "Mini-Project Released")) |> pull(dt)`
  - **Initial Submission: `{r} mp |> filter(str_detect(Details, "Mini-Project Due")) |> pull(dt)`**
  - **Peer Feedback:**
    - Peer Feedback Assigned: `{r} mp |> filter(str_detect(Details, "Mini-Project Peer Feedback Assigned")) |> pull(dt)`
    - **Peer Feedback Due: `{r} mp |> filter(str_detect(Details, "Mini-Project Peer Feedback Due")) |> pull(dt)`**
